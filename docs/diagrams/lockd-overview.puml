@startuml
' Lockd lease lifecycle overview with storage simplified

skin rose

actor Client
participant "lockd HTTP Handler" as Handler
participant "JSON Compactor" as Compactor
participant "Storage Crypto" as Crypto
participant "Storage Backend" as Storage

== Acquire ==
Client -> Handler: POST /v1/acquire\n{key, owner, ttl_seconds}
Handler -> Storage: LoadMeta(key)
Storage --> Handler: encrypted meta
Handler -> Crypto: DecryptMeta
Crypto --> Handler: meta + meta_etag (or empty)
Handler -> Handler: create lease_id\n& fencing_token := meta.fencing+1
Handler -> Crypto: EncryptMeta(updated lease)
Crypto --> Storage: StoreMeta(..., expected_etag)
Storage --> Crypto: new_meta_etag
Crypto --> Handler: new_meta_etag
Handler --> Client: 200 AcquireResponse\nheaders: X-Fencing-Token, X-Key-Version

== KeepAlive ==
Client -> Handler: POST /v1/keepalive\nlease_id, ttl, X-Fencing-Token
Handler -> Storage: LoadMeta/Validate lease
Storage --> Handler: encrypted meta
Handler -> Crypto: DecryptMeta
Crypto --> Handler: meta snapshot
Handler -> Crypto: EncryptMeta(updated expires_at)
Crypto --> Storage: StoreMeta(...)
Storage --> Crypto: new_meta_etag
Crypto --> Handler: new_meta_etag
Handler --> Client: 200 KeepAlive\nheader: X-Fencing-Token

== GetState ==
Client -> Handler: POST /v1/get-state\nX-Lease-ID, X-Fencing-Token
Handler -> Storage: ReadState(key)
Storage --> Crypto: encrypted JSON + ETag
Crypto --> Handler: JSON stream + ETag
Handler --> Client: 200 stream JSON\nheaders: ETag, X-Key-Version, X-Fencing-Token

== UpdateState ==
Client -> Handler: POST /v1/update-state\nbody, CAS headers, X-Fencing-Token
Handler -> Compactor: compact JSON
Compactor --> Handler: canonical stream
Handler -> Crypto: EncryptState
Crypto --> Storage: WriteState(key)
Storage --> Crypto: new_state_etag\n+ bytes_written
Crypto --> Handler: new_state_etag\n+ bytes_written
Handler -> Crypto: EncryptMeta(version+1, etag)
Crypto --> Storage: StoreMeta(...)
Storage --> Crypto: new_meta_etag
Crypto --> Handler: new_meta_etag
Handler --> Client: 200 {new_version, new_state_etag, bytes}\nheaders: ETag, X-Key-Version, X-Fencing-Token

== Release ==
Client -> Handler: POST /v1/release\nX-Lease-ID, X-Fencing-Token
Handler -> Crypto: EncryptMeta(lease cleared)
Crypto --> Storage: StoreMeta(...)
Storage --> Crypto: new_meta_etag
Crypto --> Handler: new_meta_etag
Handler --> Client: 200 {released:true}

@enduml
